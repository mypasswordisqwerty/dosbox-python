/* This file was generated by PyBindGen 0.15.0.782 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;


#include "debug_api.h"
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    CBreakpoint *obj;
    PyBindGenWrapperFlags flags:8;
} PyCBreakpoint;


extern PyTypeObject PyCBreakpoint_Type;


typedef struct {
    PyObject_HEAD
    std::list<CBreakpoint> *obj;
} Pystd__list__lt__CBreakpoint__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt__CBreakpoint__gt__ *container;
    std::list<CBreakpoint>::iterator *iterator;
} Pystd__list__lt__CBreakpoint__gt__Iter;


extern PyTypeObject Pystd__list__lt__CBreakpoint__gt___Type;
extern PyTypeObject Pystd__list__lt__CBreakpoint__gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___CBreakpoint___gt__(PyObject *arg, std::list<CBreakpoint> *container);
void _wrap_Callback(void *p);
void _wrap_LogCb(int tick, const char *logger, char* msg, void *p);

int _wrap_convert_py2c__CBreakpoint(PyObject *value, CBreakpoint *address);

/* --- module functions --- */


PyObject *
_wrap_dosboxdbg_DEBUG_EnableDebugger()
{
    PyObject *py_retval;

    DEBUG_EnableDebugger();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_dosboxdbg_DEBUG_EnableDebugger();


PyObject *
_wrap_dosboxdbg_python_register_log_cb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    const char *keywords[] = {"cb", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "visitor parameter must be callable");
        return NULL;
    }
    Py_INCREF(cb);
    python_register_log_cb(_wrap_LogCb, cb);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    Py_DECREF(cb);
    return py_retval;
}
PyObject * _wrap_dosboxdbg_python_register_log_cb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_dosboxdbg_python_register_tick_cb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    const char *keywords[] = {"cb", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "visitor parameter must be callable");
        return NULL;
    }
    Py_INCREF(cb);
    python_register_tick_cb(_wrap_Callback, cb);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    Py_DECREF(cb);
    return py_retval;
}
PyObject * _wrap_dosboxdbg_python_register_tick_cb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_dosboxdbg_GetAddress(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    int seg;
    unsigned int offset;
    const char *keywords[] = {"seg", "offset", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iI", (char **) keywords, &seg, &offset)) {
        return NULL;
    }
    if (seg > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = GetAddress(seg, offset);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}
PyObject * _wrap_dosboxdbg_GetAddress(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_dosboxdbg_python_dasm(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char *retval;
    int seg;
    unsigned int ofs;
    int eip;
    const char *keywords[] = {"seg", "ofs", "eip", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iIi", (char **) keywords, &seg, &ofs, &eip)) {
        return NULL;
    }
    if (seg > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = python_dasm(seg, ofs, eip);
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}
PyObject * _wrap_dosboxdbg_python_dasm(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_dosboxdbg_python_memory(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seg;
    unsigned int ofs;
    unsigned int len;
    const char *mem;
    Py_ssize_t mem_len;
    std::string mem_std;
    const char *keywords[] = {"seg", "ofs", "len", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iII", (char **) keywords, &seg, &ofs, &len)) {
        return NULL;
    }
    if (seg > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    python_memory(seg, ofs, len, &mem_std);
    py_retval = Py_BuildValue((char *) "s#", (mem_std).c_str(), (mem_std).size());
    return py_retval;
}
PyObject * _wrap_dosboxdbg_python_memory(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_dosboxdbg_python_bpoints()
{
    PyObject *py_retval;
    std::list< CBreakpoint > retval;
    Pystd__list__lt__CBreakpoint__gt__ *py_std__list__lt__CBreakpoint__gt__;

    retval = python_bpoints();
    py_std__list__lt__CBreakpoint__gt__ = PyObject_New(Pystd__list__lt__CBreakpoint__gt__, &Pystd__list__lt__CBreakpoint__gt___Type);
    py_std__list__lt__CBreakpoint__gt__->obj = new std::list<CBreakpoint>(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__list__lt__CBreakpoint__gt__);
    return py_retval;
}
PyObject * _wrap_dosboxdbg_python_bpoints();


PyObject *
_wrap_dosboxdbg_ParseCommand(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    char *str;
    const char *keywords[] = {"str", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s", (char **) keywords, &str)) {
        return NULL;
    }
    retval = ParseCommand(str);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}
PyObject * _wrap_dosboxdbg_ParseCommand(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_dosboxdbg_python_unregister_log_cb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    const char *keywords[] = {"cb", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "visitor parameter must be callable");
        return NULL;
    }
    Py_INCREF(cb);
    python_unregister_log_cb(_wrap_LogCb, cb);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    Py_DECREF(cb);
    return py_retval;
}
PyObject * _wrap_dosboxdbg_python_unregister_log_cb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_dosboxdbg_python_registers()
{
    PyObject *py_retval;
    PyObject *retval;

    retval = python_registers();
    py_retval = Py_BuildValue((char *) "N", retval);
    return py_retval;
}
PyObject * _wrap_dosboxdbg_python_registers();


PyObject *
_wrap_dosboxdbg_DEBUG_ShowMsg(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char *format;
    const char *keywords[] = {"format", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s", (char **) keywords, &format)) {
        return NULL;
    }
    DEBUG_ShowMsg(format);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_dosboxdbg_DEBUG_ShowMsg(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_dosboxdbg_python_unregister_tick_cb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    const char *keywords[] = {"cb", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "visitor parameter must be callable");
        return NULL;
    }
    Py_INCREF(cb);
    python_unregister_tick_cb(_wrap_Callback, cb);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    Py_DECREF(cb);
    return py_retval;
}
PyObject * _wrap_dosboxdbg_python_unregister_tick_cb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);

static PyMethodDef dosboxdbg_functions[] = {
    {(char *) "EnableDebugger", (PyCFunction) _wrap_dosboxdbg_DEBUG_EnableDebugger, METH_NOARGS, NULL },
    {(char *) "RegisterLog", (PyCFunction) _wrap_dosboxdbg_python_register_log_cb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "RegisterTick", (PyCFunction) _wrap_dosboxdbg_python_register_tick_cb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_dosboxdbg_GetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "disasm", (PyCFunction) _wrap_dosboxdbg_python_dasm, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ReadMem", (PyCFunction) _wrap_dosboxdbg_python_memory, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBpoints", (PyCFunction) _wrap_dosboxdbg_python_bpoints, METH_NOARGS, NULL },
    {(char *) "ParseCommand", (PyCFunction) _wrap_dosboxdbg_ParseCommand, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "UnregisterLog", (PyCFunction) _wrap_dosboxdbg_python_unregister_log_cb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRegs", (PyCFunction) _wrap_dosboxdbg_python_registers, METH_NOARGS, NULL },
    {(char *) "ShowMsg", (PyCFunction) _wrap_dosboxdbg_DEBUG_ShowMsg, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "UnregisterTick", (PyCFunction) _wrap_dosboxdbg_python_unregister_tick_cb, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */



static int
_wrap_PyCBreakpoint__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'CBreakpoint' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyCBreakpoint_GetOffset(PyCBreakpoint *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->GetOffset();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyCBreakpoint_GetValue(PyCBreakpoint *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->GetValue();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyCBreakpoint_GetIntNr(PyCBreakpoint *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->GetIntNr();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyCBreakpoint_GetSegment(PyCBreakpoint *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->GetSegment();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyCBreakpoint_IsActive(PyCBreakpoint *self)
{
    PyObject *py_retval;
    bool retval;

    retval = self->obj->IsActive();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyCBreakpoint_ShowList(PyCBreakpoint *self)
{
    PyObject *py_retval;

    self->obj->ShowList();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyCBreakpoint_methods[] = {
    {(char *) "GetOffset", (PyCFunction) _wrap_PyCBreakpoint_GetOffset, METH_NOARGS, NULL },
    {(char *) "GetValue", (PyCFunction) _wrap_PyCBreakpoint_GetValue, METH_NOARGS, NULL },
    {(char *) "GetIntNr", (PyCFunction) _wrap_PyCBreakpoint_GetIntNr, METH_NOARGS, NULL },
    {(char *) "GetSegment", (PyCFunction) _wrap_PyCBreakpoint_GetSegment, METH_NOARGS, NULL },
    {(char *) "IsActive", (PyCFunction) _wrap_PyCBreakpoint_IsActive, METH_NOARGS, NULL },
    {(char *) "ShowList", (PyCFunction) _wrap_PyCBreakpoint_ShowList, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyCBreakpoint__tp_dealloc(PyCBreakpoint *self)
{
        CBreakpoint *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyCBreakpoint__tp_richcompare (PyCBreakpoint *PYBINDGEN_UNUSED(self), PyCBreakpoint *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyCBreakpoint_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyCBreakpoint_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "dosboxdbg.CBreakpoint",            /* tp_name */
    sizeof(PyCBreakpoint),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyCBreakpoint__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyCBreakpoint__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyCBreakpoint_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyCBreakpoint__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pystd__list__lt__CBreakpoint__gt__Iter__tp_clear(Pystd__list__lt__CBreakpoint__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__list__lt__CBreakpoint__gt__Iter__tp_traverse(Pystd__list__lt__CBreakpoint__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__list__lt__CBreakpoint__gt____tp_dealloc(Pystd__list__lt__CBreakpoint__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__list__lt__CBreakpoint__gt__Iter__tp_dealloc(Pystd__list__lt__CBreakpoint__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__list__lt__CBreakpoint__gt____tp_iter(Pystd__list__lt__CBreakpoint__gt__ *self)
{
    Pystd__list__lt__CBreakpoint__gt__Iter *iter = PyObject_GC_New(Pystd__list__lt__CBreakpoint__gt__Iter, &Pystd__list__lt__CBreakpoint__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::list<CBreakpoint>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__list__lt__CBreakpoint__gt__Iter__tp_iter(Pystd__list__lt__CBreakpoint__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__list__lt__CBreakpoint__gt__Iter__tp_iternext(Pystd__list__lt__CBreakpoint__gt__Iter *self)
{
    PyObject *py_retval;
    std::list<CBreakpoint>::iterator iter;
    PyCBreakpoint *py_CBreakpoint;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_CBreakpoint = PyObject_New(PyCBreakpoint, &PyCBreakpoint_Type);
    py_CBreakpoint->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_CBreakpoint->obj = new CBreakpoint((*iter));
    py_retval = Py_BuildValue((char *) "N", py_CBreakpoint);
    return py_retval;
}

int _wrap_convert_py2c__CBreakpoint(PyObject *value, CBreakpoint *address)
{
    PyObject *py_retval;
    PyCBreakpoint *tmp_CBreakpoint;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyCBreakpoint_Type, &tmp_CBreakpoint)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_CBreakpoint->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__list__lt___CBreakpoint___gt__(PyObject *arg, std::list<CBreakpoint> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__list__lt__CBreakpoint__gt___Type)) {
        *container = *((Pystd__list__lt__CBreakpoint__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            CBreakpoint item;
            if (!_wrap_convert_py2c__CBreakpoint(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__list__lt__CBreakpoint__gt__ instance, or a list of CBreakpoint");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__list__lt__CBreakpoint__gt____tp_init(Pystd__list__lt__CBreakpoint__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::list<CBreakpoint>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__list__lt___CBreakpoint___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__list__lt__CBreakpoint__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "dosboxdbg.Std__list__lt__CBreakpoint__gt__",            /* tp_name */
    sizeof(Pystd__list__lt__CBreakpoint__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt__CBreakpoint__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt__CBreakpoint__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__list__lt__CBreakpoint__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__list__lt__CBreakpoint__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "dosboxdbg.Std__list__lt__CBreakpoint__gt__Iter",            /* tp_name */
    sizeof(Pystd__list__lt__CBreakpoint__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt__CBreakpoint__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__list__lt__CBreakpoint__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__list__lt__CBreakpoint__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt__CBreakpoint__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__list__lt__CBreakpoint__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


void _wrap_Callback(void *p) {
  PyObject *callback = (PyObject*) p;
  PyObject_CallFunction(callback, NULL);
}
void _wrap_LogCb(int tick, const char *logger, char* msg, void *p) {
  PyObject *callback = (PyObject*) p;
  PyObject_CallFunction(callback, (char*) "iss", tick, logger, msg);
}


PyMODINIT_FUNC
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif
initdosboxdbg(void)
{
    PyObject *m;
    m = Py_InitModule3((char *) "dosboxdbg", dosboxdbg_functions, NULL);
    if (m == NULL) {
        return;
    }
    /* Register the 'CBreakpoint' class */
    if (PyType_Ready(&PyCBreakpoint_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CBreakpoint", (PyObject *) &PyCBreakpoint_Type);
    /* Register the 'std::list<CBreakpoint>' class */
    if (PyType_Ready(&Pystd__list__lt__CBreakpoint__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__list__lt__CBreakpoint__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt__CBreakpoint__gt__", (PyObject *) &Pystd__list__lt__CBreakpoint__gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt__CBreakpoint__gt__Iter", (PyObject *) &Pystd__list__lt__CBreakpoint__gt__Iter_Type);
}
